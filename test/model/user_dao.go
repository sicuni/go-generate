// Code generated by github.com/sicuni/go-generate.

package model

import (
	"gorm.io/gorm"
)

type UserWrapper struct {
	user    *User
	where   map[string]interface{}
	orderBy string
}

type UserDao struct {
	db *gorm.DB
}

func NewUserDao(db *gorm.DB) *UserDao {
	return &UserDao{db: db}
}

func (dao UserDao) QueryWrapper(user *User) *UserWrapper {
	return &UserWrapper{
		user:  user,
		where: make(map[string]interface{}),
	}
}

func (wrap *UserWrapper) Where(query string, arg interface{}) *UserWrapper {
	wrap.where[query] = arg
	return wrap
}

func (wrap *UserWrapper) OrderBy(query string) *UserWrapper {
	wrap.orderBy = query
	return wrap
}

func (dao UserDao) Insert(user *User) error {
	return dao.db.Create(user).Error
}

func (dao UserDao) DeleteByWrapper(wrap *UserWrapper) error {
	orm := dao.db.Where(wrap.user)
	for query, arg := range wrap.where {
		orm = orm.Where(query, arg)
	}
	return orm.Delete(User{}).Error
}

func (dao UserDao) DeleteById(id interface{}) error {
	return dao.db.Where("id = ?", id).Delete(User{}).Error
}

func (dao UserDao) DeleteBatchIds(ids ...interface{}) error {
	return dao.db.Where("id in ?", ids).Delete(User{}).Error
}

func (dao UserDao) UpdateById(id interface{}, user *User) error {
	return dao.db.Where("id = ?", id).Updates(user).Error
}

func (dao UserDao) SelectById(id interface{}) (*User, error) {
	user := &User{}
	err := dao.db.Table(TableNameUser).Where("id = ?", id).First(user).Error
	if err == gorm.ErrRecordNotFound {
		return nil, nil
	}

	return user, err
}

func (dao UserDao) SelectOne(wrap *UserWrapper) (*User, error) {
	user := &User{}
	orm := dao.db.Table(TableNameUser).Where(wrap.user)
	for query, arg := range wrap.where {
		orm = orm.Where(query, arg)
	}
	err := orm.Order(wrap.orderBy).First(user).Error
	if err == gorm.ErrRecordNotFound {
		return nil, nil
	}

	return user, err
}

func (dao UserDao) SelectList(wrap *UserWrapper) (userList []User, err error) {
	orm := dao.db.Table(TableNameUser).Where(wrap.user)
	for query, arg := range wrap.where {
		orm = orm.Where(query, arg)
	}

	return userList, orm.Order(wrap.orderBy).Find(&userList).Error
}

func (dao UserDao) SelectMaps(wrap *UserWrapper) (list []map[string]interface{}, err error) {
	userList := make([]User, 0)
	orm := dao.db.Table(TableNameUser).Where(wrap.user)
	for query, arg := range wrap.where {
		orm = orm.Where(query, arg)
	}
	err = orm.Find(&userList).Error
	for _, user := range userList {
		m := make(map[string]interface{})
		obj := user
		m["Id"] = obj.Id
		m["UserName"] = obj.UserName

		list = append(list, m)
	}

	return
}

func (dao UserDao) SelectCount(wrap *UserWrapper) (count int64, err error) {
	orm := dao.db.Table(TableNameUser).Where(wrap.user)
	for query, arg := range wrap.where {
		orm = orm.Where(query, arg)
	}

	return count, orm.Count(&count).Error
}

func (dao UserDao) SelectPage(limit, offset int, wrap *UserWrapper) (userList []User, err error) {
	orm := dao.db.Table(TableNameUser).Where(wrap.user)
	for query, arg := range wrap.where {
		orm = orm.Where(query, arg)
	}

	err = orm.Limit(limit).Offset(offset).Order(wrap.orderBy).Find(&userList).Error
	return userList, err
}
